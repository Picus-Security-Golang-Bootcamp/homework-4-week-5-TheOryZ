swagger: "2.0"
info:
  description: "An example of API documentation where we can process book-author information. Developed by Kadir Turan."
  version: "1.0.0"
  title: "Swagger Books and Authors"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
tags:
- name: "Authors"
  description: "Everything about Authors"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "Books"
  description: "Everything about Books"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
  - "https"
  - "http"
paths:
  /authors:
    get:
      tags: ["Authors"]
      summary: "Get all Authors"
      description: "Returns all Authors"
      operationId: "getAuthors"
      produces:
        - "application/json"
      responses:
        "200":
          description: "An array of Authors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: ["Authors"]
      summary: "Add a new author to the store"
      description: ""
      operationId: "insertAuthor"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Author object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags: ["Authors"]
      summary: "Update an existing author"
      description: ""
      operationId: "updateAuthor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Author object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
        "405":
          description: "Validation exception"
    delete:
      tags: ["Authors"]
      summary: "Deletes a author"
      description: ""
      operationId: "deleteAuthor"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Author information added for deletion"
        required: true
        schema:
          $ref: "#/definitions/Author"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
  /authors/{id}:
    get:
      tags: ["Authors"]
      summary: "Get an Author"
      description: "Returns a single Author"
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "An Author"
          schema:
            $ref: "#/definitions/Author"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: ["Authors"]
      summary: "Deletes a author by Id"
      description: ""
      operationId: "deleteAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Author id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Author not found"
  /authors/name/{name}:
    get:
      tags: ["Authors"]
      summary: "Get an Author By Name"
      description: "Returns a single Author"
      operationId: "getAuthorByName"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "path"
          description: "Name of Author to return"
          required: true
          type: "string"
      responses:
        "200":
          description: "An Author"
          schema:
            $ref: "#/definitions/Author"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /authors/non-deleted:
    get:
      tags: ["Authors"]
      summary: "Get non deleted Authors"
      description: "Returns a non deleted Authors"
      operationId: "getNonDeletedAuthors"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Authors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /authors/sum:
    get:
      tags: ["Authors"]
      summary: "Get Sum of Authors"
      description: "Returns sum of authors"
      operationId: "getSumOfAuthors"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Sum Of Author"
          schema:
              $ref: "#/definitions/CountModel"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /books:
    get:
      tags: ["Books"]
      summary: "Get all Books"
      description: "Returns all Books"
      operationId: "getBooks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "An array of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags: ["Books"]
      summary: "Add a new book to the store"
      description: ""
      operationId: "insertBook"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "book object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags: ["Books"]
      summary: "Update an existing book"
      description: ""
      operationId: "updateBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
        "405":
          description: "Validation exception"
    delete:
      tags: ["Books"]
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book information added for deletion"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
  /books/{id}:
    get:
      tags: ["Books"]
      summary: "Get an Book"
      description: "Returns a single Book"
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "An Book"
          schema:
            $ref: "#/definitions/Book"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: ["Books"]
      summary: "Deletes a book by Id"
      description: ""
      operationId: "deleteBookById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Book not found"
  /books/title/{title}:
    get:
      tags: ["Books"]
      summary: "Get an Book By Title"
      description: "Returns a single Book"
      operationId: "getBookByTitle"
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: "path"
          description: "Title of Book to return"
          required: true
          type: "string"
      responses:
        "200":
          description: "An Book"
          schema:
            $ref: "#/definitions/Book"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /books/non-deleted:
    get:
      tags: ["Books"]
      summary: "Get non deleted Books"
      description: "Returns a non deleted Books"
      operationId: "getNonDeletedBooks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /books/sum:
    get:
      tags: ["Books"]
      summary: "Get Sum of Books"
      description: "Returns sum of books"
      operationId: "getSumOfBooks"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Sum Of Book"
          schema:
              $ref: "#/definitions/CountModel"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /books/author/{id}:
    get:
      tags: ["Books"]
      summary: "Get Books by Author Id"
      description: ""
      operationId: "getBooksByAuthorId"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of Author"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "An array of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /books/withauthorname/{id}:
    get:
      tags: ["Books"]
      summary: "Get Books by Id and with Author Name"
      description: ""
      operationId: "getBooksByIdWithAuthorName"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of Book"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "An array of Books"
          schema:
              $ref: "#/definitions/BookWithAuthorName"
        "default":
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
definitions:
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      numberOfPages:
        type: "integer"
      numberOfStocks:
        type: "integer"
      price:
        type: "number"
      isbn:
        type: "string"
      releaseDate:
        type: "string"
      authorId:
        type: "integer"
        format: "int64"
      author:
        $ref: "#/definitions/Author"
  BookWithAuthorName:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      name:
        type: "string"
  CountModel:
    type: "object"
    properties:
      sum:
        type: "integer"
        format: "int64"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      details:
        type: "string"
    required:
      - code
      - message